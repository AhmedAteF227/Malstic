#!/bin/bash

print_colored() {
    color_code=$1
    text=$2
    tput setaf $color_code
    echo -e "$text" | jq -M
    tput sgr0
}


calculate_md5() {
    md5sum "$1" | cut -d ' ' -f 1
}


virustotal() {

    md5=$(calculate_md5 "$filename")
    # md5="58898bd42c5bd3bf9b1389f0eee5b39cd59180e8370eb9ea838a0b327bd6fe47"

    # bc983429b4ea4a4c8dbe630e6bd0b232b5836d7acc73577f6bd09692dbb96558
    # echo "Calling VirusTotal API for file with MD5: $md5"
    api_response=$(curl -s --request GET --url "https://www.virustotal.com/api/v3/files/$md5" --header "x-apikey: $api_key")
    # echo "$api_response"
    echo "$api_response" > report.json

    antivirus_software=$(echo "$api_response" | jq -r '.data.attributes.last_analysis_results')
    pe_info=$(echo "$api_response" | jq -r '.data.attributes.pe_info')
    import_list=$(echo "$api_response" | jq -r '.data.attributes.pe_info.import_list')
    export_list=$(echo "$api_response" | jq -r '.data.attributes.pe_info.export_list')
    virus_names=$(echo "$api_response" | jq -r '.data.attributes.names')
    virus_type=$(echo "$api_response" | jq -r '.data.attributes.type_description')
    sections=$(echo "$api_response" | jq -r '.data.attributes.pe_info.sections')

    declare -g section_names=()

    # Iterate through the sections and extract the "name" field
    while IFS= read -r section; do
        name=$(echo "$section" | jq -r '.name')
        section_names+=("$name")
    done <<< "$(echo "$sections" | jq -c '.[]')"



    echo -e "\n\e[1;31m-*-Engines:\e[0m"
    # Loop through the data and print objects with "malicious" category
     for engine in $(echo "$api_response" | jq -r '.data.attributes.last_analysis_results | keys_unsorted[]'); do
        category=$(echo "$api_response" | jq -r ".data.attributes.last_analysis_results.$engine.category")
        if [ "$category" = "malicious" ]; then
            echo "Engine: $engine"
            echo "$api_response" | jq -r ".data.attributes.last_analysis_results.$engine"
            echo "----------------------------------------"
        fi
    done





    # echo "Some Antivirus Softwares: $antivirus_software"
    echo -e "\n\e[1;31m--*--PE Information: \e[0m"
    # echo "$pe_info"

    if [ -n "$import_list" ]; then
    echo -e "\n\e[1;31m-*-Import List: \e[0m"
    echo "$import_list"
    fi

    if [ -n "$export_list" ]; then
    echo -e "\n\e[1;31m-*-Export List: \e[0m"
    echo "$export_list"
    fi
    
    # echo "Names: $virus_names"
    # echo "Type: $virus_type"
}

extract_strings() {

    malware_sample="$1"


    # Extract ASCII strings
    # echo -e "\n\e[1;31m-*-ASCII STRINGS:\e[0m"
    strings "$malware_sample" > strings.txt
    # echo `cat strings.txt`

    # Extract Unicode strings
    echo -e "\n\e[1;31m-*-UNICODE STRINGS:\e[0m"
    strings -el "$malware_sample" 
}

extract_urls_and_emails() {
    local file_path=$1

    # Extract URLs using grep
    urls=$(grep -oP 'https?://\S+' "$file_path")

    # Extract emails using grep
    emails=$(grep -oP '\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b' "$file_path")

    # Display extracted URLs
    echo -e "\n\e[1;31m-*-Extracted URLs:\e[0m"
    echo "$urls"

    # Display extracted emails
    echo -e "\n\e[1;31m-*-Extracted Emails:\e[0m"
    echo "$emails"
}



section_analysis() {

    local sections=$1

    # List of known "good" sections
    good_sections=( '.data' '.text' '.code' '.reloc' '.idata' '.edata' '.rdata' '.bss' '.rsrc')
    

    # Get the number of sections
    number_of_sections=`echo $sections | jq length`

    # Check the number of sections
    if ((number_of_sections < 1 || number_of_sections > 9)); then
      echo -e "\e[1;31m-*-[SUSPICIOUS NUMBER OF SECTIONS] - $number_of_sections\e[0m"
    else
      echo "Number of Sections: $number_of_sections "
    fi

    echo -e "\e[1;31m-*-Sections names :\e[0m"
    echo "${section_names[@]}"

    echo -e "\e[1;31m-*-Sections:\e[0m"
    # echo "$sections"
    echo "$sections" | jq -c '.[]' | jq

    

    
    # Check for suspicious sections
    echo -e "\e[1;31m-*-SUSPICIOUS section name:\e[0m"
    for section in "${section_names[@]}"; do
    if [[ ! " ${good_sections[*]} " =~ " $section " ]]; then
        echo -e "\n$section"
        fi
    done

    echo "*******************************************************"

    h_l_entropy=false
    suspicious_size_of_raw_data=false

    declare -a virtual_sizes
    declare -a section_names
    declare -A sections

    # Iterate over sections
    for section_data in $(echo "$sections" | jq -c '.[]'); do
        sec_name=$(echo "$section_data" | jq -r '.name')
        virtual_address=$(echo "$section_data" | jq -r '.virtual_address')
        virtual_size=$(echo "$section_data" | jq -r '.virtual_size')
        size_of_raw_data=$(echo "$section_data" | jq -r '.raw_size')
        entropy=$(echo "$section_data" | jq -r '.entropy')

        section_names+=("$sec_name")

        # Check entropy conditions
        if (( $(echo "$entropy < 1 || $entropy > 7" | bc -l) )); then
            h_l_entropy=true
        fi

        if (( $(echo "$virtual_size / $size_of_raw_data > 10" | bc -l) )); then
            echo -e "\e[1;31m-*-SUSPICIOUS size of the section: $sec_name when stored in memory $virtual_size\e[0m"
        fi

        if [ "$h_l_entropy" = true ]; then
            echo -e "\e[1;31m-*-High or Low entropy detected:\e[0m"
            print_colored 1 "$section_data"
        fi

        if [ "$h_l_entropy" = false ]; then
            echo "$section_data" | jq
        fi

    done    

}



if [ "$#" -ne 2 ]; then
        echo "Usage: $0 <filename> <api_key>"
        exit 1
    fi

filename="$1"
api_key="$2"

api_response=$(curl -s --request GET --url "https://www.virustotal.com/api/v3/files/$md5" --header "x-apikey: $api_key")
#     # echo "$api_response"

sections=$(echo "$api_response" | jq -r '.data.attributes.pe_info.sections')



virustotal "$filename" "$api_key"

section_analysis "$sections"

extract_strings "$filename"

extract_urls_and_emails strings.txt


# echo -e "\e[1;31m-*-Sections:\e[0m"
# echo "$sections"



